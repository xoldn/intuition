let urlParams = new URLSearchParams(window.location.search);
let userId = urlParams.get("user_id");
let username = urlParams.get("username") || "–ò–≥—Ä–æ–∫";

if (!userId) {
    alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id.");
    throw new Error("user_id not found");
}

let correctCount = 0;
let wrongCount = 0;

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const card = document.getElementById("card");
const correctScoreEl = document.getElementById("correctScore");
const wrongScoreEl = document.getElementById("wrongScore");
const leaderboardDiv = document.createElement("div");
leaderboardDiv.id = "leaderboard";
document.body.appendChild(leaderboardDiv);

// –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
async function startNewRound() {
    card.style.backgroundColor = "#777";
    card.textContent = "?";
    card.style.boxShadow = "none";

    try {
        await fetch("/start_round", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId })
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–∞—É–Ω–¥–∞:", error);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
async function makeGuess(guess) {
    try {
        let response = await fetch("/check_guess", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId, guess: guess })
        });

        let data = await response.json();

        card.style.backgroundColor = data.color;
        card.textContent = "";

        if (data.correct) {
            correctCount++;
            card.style.boxShadow = "inset 0 0 0 5px limegreen";
        } else {
            wrongCount++;
            card.style.boxShadow = "inset 0 0 0 5px red";
        }

        updateScore();
        updateLeaderboard();
        setTimeout(startNewRound, 500);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞:", error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
function updateScore() {
    correctScoreEl.textContent = `‚úÖ ${correctCount}`;
    wrongScoreEl.textContent = `‚ùå ${wrongCount}`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
async function updateLeaderboard() {
    try {
        let response = await fetch("/leaderboard");
        let data = await response.json();

        let leaderboardText = `<h2>üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</h2><ul>`;
        data.forEach((player, index) => {
            leaderboardText += `<li>${index + 1}. ${player.username}: ‚úÖ ${player.correct} | ‚ùå ${player.wrong}</li>`;
        });
        leaderboardText += `</ul>`;

        leaderboardDiv.innerHTML = leaderboardText;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø-–∏–≥—Ä–æ–∫–æ–≤:", error);
    }
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
startNewRound();
updateLeaderboard();
