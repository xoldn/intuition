let urlParams = new URLSearchParams(window.location.search);
let userId = Telegram.WebApp.initDataUnsafe?.user?.id;
let username = Telegram.WebApp.initDataUnsafe?.user?.username || "–ò–≥—Ä–æ–∫";
let chatId = urlParams.get("chat_id");
let messageId = urlParams.get("message_id");
let inlineMessageId = urlParams.get("inline_message_id");


if (!userId || (!inlineMessageId && (!chatId || !messageId))) {
    alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    throw new Error("Missing user data");
}

let correctCount = 0;
let wrongCount = 0;
let isProcessing = true;
let currentColor = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const card = document.getElementById("card");
const resultsContent = document.getElementById("resultsContent");
const correctScoreEl = document.getElementById("correctScore");
const wrongScoreEl = document.getElementById("wrongScore");

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
if (!card || !correctScoreEl || !wrongScoreEl) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞");
    throw new Error("Missing UI elements");
}

// –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
async function startNewRound() {
    if (!isProcessing) return;

    try {
        const response = await fetch("/start_round", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId })
        });

        if (!response.ok) throw new Error("Network response was not ok");
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–∞—É–Ω–¥–∞:", error);
        card.textContent = "‚ö†Ô∏è";
    } finally {
        isProcessing = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
async function makeGuess(guess) {
    if (isProcessing || currentColor) return;
    
    try {
        const response = await fetch("/check_guess", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                user_id: userId,
                guess: guess
            })
        });

        if (!response.ok) throw new Error("Network response was not ok");

        const data = await response.json();
        currentColor = data.color; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≥–∞–¥–∞–ª:", data.correct);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–≤–µ—Ç –Ω–∞ 300–º—Å
        card.style.backgroundColor = currentColor;
        card.textContent = "";
       

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç –¥–æ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (data.correct) {
            correctCount++;
            card.style.boxShadow = "inset 0 0 0 5px limegreen";
        } else {
            wrongCount++;
            card.style.boxShadow = "inset 0 0 0 5px red";
        }

        // –ß–µ—Ä–µ–∑ 300–º—Å —Å–∫—Ä—ã–≤–∞–µ–º —Ü–≤–µ—Ç
        await new Promise(resolve => setTimeout(resolve, 300));
        card.style.backgroundColor = "#777";
        card.textContent = "?";
        card.style.boxShadow = "0 4px 8px rgba(0, 0, 0, 0.5)";

        updateScore();
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞:", error);
        card.textContent = "‚ö†Ô∏è";
    } finally {
        currentColor = null;
        isProcessing = true;
        startNewRound(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
function updateScore() {
    correctScoreEl.textContent = `‚úÖ ${correctCount}`;
    wrongScoreEl.textContent = `‚ùå ${wrongCount}`;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function displayUsers() {
    const modal = document.getElementById("resultsModal");
    if (modal) {
        modal.style.display = "block";
    }
    try {
        const response = await fetch("/leaderboard", {
            method: "GET",
            headers: { "Content-Type": "application/json" }
        });

        if (!response.ok) throw new Error("Network response was not ok");

        const users = await response.json();
        resultsContent.innerHTML = ""; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

        if (users.length === 0) {
            resultsContent.textContent = "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.";
            return;
        }
        users.forEach(user => {
            const userElement = document.createElement("div");
            userElement.classList.add("user-result"); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            const totalGuesses = user.correct + user.wrong;
            const accuracy = totalGuesses > 0 ? ((user.correct / totalGuesses) * 100).toFixed(2) : 0;
            const displayName = user.user_id === userId ? "—è" : user.username;
            userElement.textContent = `${displayName}: (${user.correct} ‚úÖ, ${user.wrong} ‚ùå, ${accuracy}% üéØ)`;

            if (user.user_id === userId) {
                userElement.style.fontWeight = "bold"; // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                userElement.style.color = "blue"; // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                userElement.style.backgroundColor = "lightyellow"; // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                userElement.style.border = "1px solid blue"; // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É
                userElement.style.padding = "5px"; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
                userElement.style.borderRadius = "5px"; // –°–∫—Ä—É–≥–ª—è–µ–º —É–≥–ª—ã
            }

            resultsContent.appendChild(userElement);
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
        resultsContent.textContent = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.";
    }
}

function shareScore() {
    if (window.Telegram && Telegram.Game && typeof Telegram.Game.shareScore === "function") {
        Telegram.Game.shareScore(correctCount);
    } else {
        console.warn("Telegram Game API shareScore –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
    }
}

function closeModal() {
    const modal = document.getElementById("resultsModal");
    if (modal) {
        modal.style.display = "none";
    }
}

function restartGame() {
    // –°–±—Ä–æ—Å —Å—á—ë—Ç–æ–≤
    correctCount = 0;
    wrongCount = 0;
    updateScore();
    startNewRound();
}

const addClickListener = (id, handler) => {
    document.getElementById(id)?.addEventListener("click", handler);
};

addClickListener("closeBtnX", closeModal);
addClickListener("closeBtn", closeModal);
addClickListener("viewResultsBtn", displayUsers);
addClickListener("restartBtn", restartGame);
addClickListener("guessWhite", () => makeGuess("white"));
addClickListener("guessBlack", () => makeGuess("black"));

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
startNewRound();