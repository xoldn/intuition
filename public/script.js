let tg = window.Telegram.WebApp;
tg.expand();

let correctCount = 0;
let wrongCount = 0;
let user = tg.initDataUnsafe.user;
if (!user) {
    alert("–û—à–∏–±–∫–∞: Telegram WebApp –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ.");
    throw new Error("No Telegram user data");
}

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const card = document.getElementById("card");
const correctScoreEl = document.getElementById("correctScore");
const wrongScoreEl = document.getElementById("wrongScore");

// –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
async function startNewRound() {
    card.style.backgroundColor = "#777";
    card.textContent = "?";
    card.style.boxShadow = "none";

    try {
        await fetch("/start_round", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: user.id })
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–∞—É–Ω–¥–∞:", error);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
async function makeGuess(guess) {
    try {
        let response = await fetch("/check_guess", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: user.id, guess: guess })
        });

        let data = await response.json();

        card.style.backgroundColor = data.color;
        card.textContent = "";

        if (data.correct) {
            correctCount++;
            card.style.boxShadow = "inset 0 0 0 5px limegreen";
        } else {
            wrongCount++;
            card.style.boxShadow = "inset 0 0 0 5px red";
        }

        updateScore();
        sendResult();
        setTimeout(startNewRound, 500);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞:", error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
function updateScore() {
    correctScoreEl.textContent = `‚úÖ ${correctCount}`;
    wrongScoreEl.textContent = `‚ùå ${wrongCount}`;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram
async function sendResult() {
    try {
        await fetch("/save_score", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: user.id, username: user.username, score: correctCount })
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", error);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
async function getLeaderboard() {
    try {
        let response = await fetch("/leaderboard");
        let data = await response.json();

        let leaderboardText = "üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:**\n";
        data.forEach((player, index) => {
            leaderboardText += `${index + 1}. ${player.username}: ${player.score} –æ—á–∫–æ–≤\n`;
        });

        alert(leaderboardText);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø-–∏–≥—Ä–æ–∫–æ–≤:", error);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const leaderboardBtn = document.createElement("button");
leaderboardBtn.textContent = "üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤";
leaderboardBtn.style = "margin-top: 20px; padding: 10px; font-size: 1rem;";
leaderboardBtn.onclick = getLeaderboard;
document.body.appendChild(leaderboardBtn);

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
startNewRound();
